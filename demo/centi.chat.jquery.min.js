var CentiChat = function(config) {
    'use strict';

    /*!
 * JavaScript Cookie v2.1.4
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader = false;
	if (typeof define === 'function' && define.amd) {
		define(factory);
		registeredInModuleLoader = true;
	}
	if (typeof exports === 'object') {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function init (converter) {
		function api (key, value, attributes) {
			var result;
			if (typeof document === 'undefined') {
				return;
			}

			// Write

			if (arguments.length > 1) {
				attributes = extend({
					path: '/'
				}, api.defaults, attributes);

				if (typeof attributes.expires === 'number') {
					var expires = new Date();
					expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
					attributes.expires = expires;
				}

				// We're using "expires" because "max-age" is not supported by IE
				attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

				try {
					result = JSON.stringify(value);
					if (/^[\{\[]/.test(result)) {
						value = result;
					}
				} catch (e) {}

				if (!converter.write) {
					value = encodeURIComponent(String(value))
						.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
				} else {
					value = converter.write(value, key);
				}

				key = encodeURIComponent(String(key));
				key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
				key = key.replace(/[\(\)]/g, escape);

				var stringifiedAttributes = '';

				for (var attributeName in attributes) {
					if (!attributes[attributeName]) {
						continue;
					}
					stringifiedAttributes += '; ' + attributeName;
					if (attributes[attributeName] === true) {
						continue;
					}
					stringifiedAttributes += '=' + attributes[attributeName];
				}
				return (document.cookie = key + '=' + value + stringifiedAttributes);
			}

			// Read

			if (!key) {
				result = {};
			}

			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all. Also prevents odd result when
			// calling "get()"
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var rdecode = /(%[0-9A-Z]{2})+/g;
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = parts[0].replace(rdecode, decodeURIComponent);
					cookie = converter.read ?
						converter.read(cookie, name) : converter(cookie, name) ||
						cookie.replace(rdecode, decodeURIComponent);

					if (this.json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					if (key === name) {
						result = cookie;
						break;
					}

					if (!key) {
						result[name] = cookie;
					}
				} catch (e) {}
			}

			return result;
		}

		api.set = api;
		api.get = function (key) {
			return api.call(api, key);
		};
		api.getJSON = function () {
			return api.apply({
				json: true
			}, [].slice.call(arguments));
		};
		api.defaults = {};

		api.remove = function (key, attributes) {
			api(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        // Node/CommonJS
        factory(require('jquery'));
    } else {
        // Browser globals
        factory(jQuery);
    }
}(function ($) {

var ua = navigator.userAgent,
	iPhone = /iphone/i.test(ua),
	chrome = /chrome/i.test(ua),
	android = /android/i.test(ua),
	caretTimeoutId;

$.mask = {
	//Predefined character definitions
	definitions: {
		'9': "[0-9]",
		'a': "[A-Za-z]",
		'*': "[A-Za-z0-9]"
	},
	autoclear: true,
	dataName: "rawMaskFn",
	placeholder: '_'
};

$.fn.extend({
	//Helper Function for Caret positioning
	caret: function(begin, end) {
		var range;

		if (this.length === 0 || this.is(":hidden") || this.get(0) !== document.activeElement) {
			return;
		}

		if (typeof begin == 'number') {
			end = (typeof end === 'number') ? end : begin;
			return this.each(function() {
				if (this.setSelectionRange) {
					this.setSelectionRange(begin, end);
				} else if (this.createTextRange) {
					range = this.createTextRange();
					range.collapse(true);
					range.moveEnd('character', end);
					range.moveStart('character', begin);
					range.select();
				}
			});
		} else {
			if (this[0].setSelectionRange) {
				begin = this[0].selectionStart;
				end = this[0].selectionEnd;
			} else if (document.selection && document.selection.createRange) {
				range = document.selection.createRange();
				begin = 0 - range.duplicate().moveStart('character', -100000);
				end = begin + range.text.length;
			}
			return { begin: begin, end: end };
		}
	},
	unmask: function() {
		return this.trigger("unmask");
	},
	mask: function(mask, settings) {
		var input,
			defs,
			tests,
			partialPosition,
			firstNonMaskPos,
            lastRequiredNonMaskPos,
            len,
            oldVal;

		if (!mask && this.length > 0) {
			input = $(this[0]);
            var fn = input.data($.mask.dataName)
			return fn?fn():undefined;
		}

		settings = $.extend({
			autoclear: $.mask.autoclear,
			placeholder: $.mask.placeholder, // Load default placeholder
			completed: null
		}, settings);


		defs = $.mask.definitions;
		tests = [];
		partialPosition = len = mask.length;
		firstNonMaskPos = null;

		mask = String(mask);

		$.each(mask.split(""), function(i, c) {
			if (c == '?') {
				len--;
				partialPosition = i;
			} else if (defs[c]) {
				tests.push(new RegExp(defs[c]));
				if (firstNonMaskPos === null) {
					firstNonMaskPos = tests.length - 1;
				}
                if(i < partialPosition){
                    lastRequiredNonMaskPos = tests.length - 1;
                }
			} else {
				tests.push(null);
			}
		});

		return this.trigger("unmask").each(function() {
			var input = $(this),
				buffer = $.map(
    				mask.split(""),
    				function(c, i) {
    					if (c != '?') {
    						return defs[c] ? getPlaceholder(i) : c;
    					}
    				}),
				defaultBuffer = buffer.join(''),
				focusText = input.val();

            function tryFireCompleted(){
                if (!settings.completed) {
                    return;
                }

                for (var i = firstNonMaskPos; i <= lastRequiredNonMaskPos; i++) {
                    if (tests[i] && buffer[i] === getPlaceholder(i)) {
                        return;
                    }
                }
                settings.completed.call(input);
            }

            function getPlaceholder(i){
                if(i < settings.placeholder.length)
                    return settings.placeholder.charAt(i);
                return settings.placeholder.charAt(0);
            }

			function seekNext(pos) {
				while (++pos < len && !tests[pos]);
				return pos;
			}

			function seekPrev(pos) {
				while (--pos >= 0 && !tests[pos]);
				return pos;
			}

			function shiftL(begin,end) {
				var i,
					j;

				if (begin<0) {
					return;
				}

				for (i = begin, j = seekNext(end); i < len; i++) {
					if (tests[i]) {
						if (j < len && tests[i].test(buffer[j])) {
							buffer[i] = buffer[j];
							buffer[j] = getPlaceholder(j);
						} else {
							break;
						}

						j = seekNext(j);
					}
				}
				writeBuffer();
				input.caret(Math.max(firstNonMaskPos, begin));
			}

			function shiftR(pos) {
				var i,
					c,
					j,
					t;

				for (i = pos, c = getPlaceholder(pos); i < len; i++) {
					if (tests[i]) {
						j = seekNext(i);
						t = buffer[i];
						buffer[i] = c;
						if (j < len && tests[j].test(t)) {
							c = t;
						} else {
							break;
						}
					}
				}
			}

			function androidInputEvent(e) {
				var curVal = input.val();
				var pos = input.caret();
				if (oldVal && oldVal.length && oldVal.length > curVal.length ) {
					// a deletion or backspace happened
					checkVal(true);
					while (pos.begin > 0 && !tests[pos.begin-1])
						pos.begin--;
					if (pos.begin === 0)
					{
						while (pos.begin < firstNonMaskPos && !tests[pos.begin])
							pos.begin++;
					}
					input.caret(pos.begin,pos.begin);
				} else {
					var pos2 = checkVal(true);
					var lastEnteredValue = curVal.charAt(pos.begin);
					if (pos.begin < len){
						if(!tests[pos.begin]){
							pos.begin++;
							if(tests[pos.begin].test(lastEnteredValue)){
								pos.begin++;
							}
						}else{
							if(tests[pos.begin].test(lastEnteredValue)){
								pos.begin++;
							}
						}
					}
					input.caret(pos.begin,pos.begin);
				}
				tryFireCompleted();
			}


			function blurEvent(e) {
                checkVal();

                if (input.val() != focusText)
                    input.change();
            }

			function keydownEvent(e) {
                if (input.prop("readonly")){
                    return;
                }

				var k = e.which || e.keyCode,
					pos,
					begin,
					end;
                    oldVal = input.val();
				//backspace, delete, and escape get special treatment
				if (k === 8 || k === 46 || (iPhone && k === 127)) {
					pos = input.caret();
					begin = pos.begin;
					end = pos.end;

					if (end - begin === 0) {
						begin=k!==46?seekPrev(begin):(end=seekNext(begin-1));
						end=k===46?seekNext(end):end;
					}
					clearBuffer(begin, end);
					shiftL(begin, end - 1);

					e.preventDefault();
				} else if( k === 13 ) { // enter
					blurEvent.call(this, e);
				} else if (k === 27) { // escape
					input.val(focusText);
					input.caret(0, checkVal());
					e.preventDefault();
				}
			}

			function keypressEvent(e) {
                if (input.prop("readonly")){
                    return;
                }

				var k = e.which || e.keyCode,
					pos = input.caret(),
					p,
					c,
					next;

				if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {//Ignore
					return;
				} else if ( k && k !== 13 ) {
					if (pos.end - pos.begin !== 0){
						clearBuffer(pos.begin, pos.end);
						shiftL(pos.begin, pos.end-1);
					}

					p = seekNext(pos.begin - 1);
					if (p < len) {
						c = String.fromCharCode(k);
						if (tests[p].test(c)) {
							shiftR(p);

							buffer[p] = c;
							writeBuffer();
							next = seekNext(p);

							if(android){
								//Path for CSP Violation on FireFox OS 1.1
								var proxy = function() {
									$.proxy($.fn.caret,input,next)();
								};

								setTimeout(proxy,0);
							}else{
								input.caret(next);
							}
                            if(pos.begin <= lastRequiredNonMaskPos){
		                         tryFireCompleted();
                             }
						}
					}
					e.preventDefault();
				}
			}

			function clearBuffer(start, end) {
				var i;
				for (i = start; i < end && i < len; i++) {
					if (tests[i]) {
						buffer[i] = getPlaceholder(i);
					}
				}
			}

			function writeBuffer() { input.val(buffer.join('')); }

			function checkVal(allow) {
				//try to place characters where they belong
				var test = input.val(),
					lastMatch = -1,
					i,
					c,
					pos;

				for (i = 0, pos = 0; i < len; i++) {
					if (tests[i]) {
						buffer[i] = getPlaceholder(i);
						while (pos++ < test.length) {
							c = test.charAt(pos - 1);
							if (tests[i].test(c)) {
								buffer[i] = c;
								lastMatch = i;
								break;
							}
						}
						if (pos > test.length) {
							clearBuffer(i + 1, len);
							break;
						}
					} else {
                        if (buffer[i] === test.charAt(pos)) {
                            pos++;
                        }
                        if( i < partialPosition){
                            lastMatch = i;
                        }
					}
				}
				if (allow) {
					writeBuffer();
				} else if (lastMatch + 1 < partialPosition) {
					if (settings.autoclear || buffer.join('') === defaultBuffer) {
						// Invalid value. Remove it and replace it with the
						// mask, which is the default behavior.
						if(input.val()) input.val("");
						clearBuffer(0, len);
					} else {
						// Invalid value, but we opt to show the value to the
						// user and allow them to correct their mistake.
						writeBuffer();
					}
				} else {
					writeBuffer();
					input.val(input.val().substring(0, lastMatch + 1));
				}
				return (partialPosition ? i : firstNonMaskPos);
			}

			input.data($.mask.dataName,function(){
				return $.map(buffer, function(c, i) {
					return tests[i]&&c!=getPlaceholder(i) ? c : null;
				}).join('');
			});


			input
				.one("unmask", function() {
					input
						.off(".mask")
						.removeData($.mask.dataName);
				})
				.on("focus.mask", function() {
                    if (input.prop("readonly")){
                        return;
                    }

					clearTimeout(caretTimeoutId);
					var pos;

					focusText = input.val();

					pos = checkVal();

					caretTimeoutId = setTimeout(function(){
                        if(input.get(0) !== document.activeElement){
                            return;
                        }
						writeBuffer();
						if (pos == mask.replace("?","").length) {
							input.caret(0, pos);
						} else {
							input.caret(pos);
						}
					}, 10);
				})
				.on("blur.mask", blurEvent)
				.on("keydown.mask", keydownEvent)
				.on("keypress.mask", keypressEvent)
				.on("input.mask paste.mask", function() {
                    if (input.prop("readonly")){
                        return;
                    }

					setTimeout(function() {
						var pos=checkVal(true);
						input.caret(pos);
                        tryFireCompleted();
					}, 0);
				});
                if (chrome && android)
                {
                    input
                        .off('input.mask')
                        .on('input.mask', androidInputEvent);
                }
				checkVal(); //Perform initial check for existing values
		});
	}
});
}));

 var Utils = function() {
     this.generateStyle = function(config) {
         var css = ['style=\"']
         for (var key in config) {
             css.push(key + ':' + config[key]);
             css.push(';');
         }
         css.push('\"');
         return css.join("");
     }

     this.formateDate = function(date) {
         var monthNames = [
             "Janeiro", "Fevereiro", "Mar\u00e7o",
             "Abril", "Maio", "Junho", "Julho",
             "Agosto", "Setembro", "Outubro",
             "Novembro", "Dezembro"
         ];

         var day = date.getDate();
         var monthIndex = date.getMonth();
         var year = date.getFullYear();
         var hour = date.getHours();
         var minutes = date.getMinutes();
         var seconds = date.getSeconds();

         return day + ' ' + monthNames[monthIndex] + ' ' + year + ' ' + hour + ':' + minutes + ':' + seconds;
     }
 };
var CentiChatEnvironment = function() {

    var _environment = this;

    (function() {
        var name = Cookies.get('centi.chat.user.name');
        var email = Cookies.get('centi.chat.user.email');
        var tel = Cookies.get('centi.chat.user.telephone');

        _environment.user = {
            name: name,
            email: email,
            telephone: tel
        }
        _environment.loginIsOn = false;

    })()
}
var CentiChatConnection = function() {

    if (!config) {
        console.error('Object config not present! wss destyne path is request for this object');
        return;
    }

    var _self = this;
    var _ws = null;

    (function() {
        _ws = new WebSocket(config.wss);

        _ws.onerror = function(error) {
            console.info('WebSocket Error ', error);
        };

        _ws.onmessage = function(e) {
            console.info(e);
        };

        _ws.onopen = function(params) {
            if (_ws.readyState === 1) {
                console.info('websocket connected');
                register();
            }
        }
    })();

    this.send = function(message) {
        var command = 'chat|gleidson.pinheiro|' + message;
        console.log('Send command', command);
        _ws.send(command);
    }

    function register() {
        console.log('_environment', _environment);
        var commandRegister = 'login|' + _environment.user.name + '|' + _environment.user.name;
        console.debug(_ws);
        console.info('registered websocket');
        try {
            _ws.send(commandRegister);
        } catch (error) {
            $log.error(error);
        }
    }

};
var CentiChatMinWindow = function() {
    var _html = [];
    _html.push('<div class="centi-chat-windowmin centi-button-window-minimize" ' + _theme.cssMinwindow + '>');
    _html.push('<div ' + _theme.cssIconContent + '>');
    _html.push('<div style="cursor: pointer;">');
    _html.push(_theme.iconChat);
    _html.push('</div>');
    _html.push('</div>');
    _html.push('</div>');

    $(document).ready(function() {

        $(document.body).append(_html.join(""));

        (function() {

            $('.centi-button-window-minimize').on('click', function() {
                if (_environment.loginIsOn)
                    $('.centi-chat-window').toggle();
                else
                    $('.centi-chat-form').toggle();
                $(this).toggle();
            });

            $(".centi-chat-windowmin").hover(function() {
                $(this).css("background-color", config.colorThemeSecondary);
            }, function() {
                $(this).css("background-color", config.colorThemePrimary);
            });
        })();


    });

}
var CentiChatWindow = function() {
    var _html = [];
    _html.push('<div class="centi-chat-window" ' + _theme.cssWindow + '>');
    _html.push('<div class="centi-chat-header" ' + _theme.cssHeader + '>');
    _html.push('<p ' + _theme.cssTitle + '>');
    _html.push(config.title ? config.title : 'Centi Soluções');
    _html.push('</p>');
    _html.push('<div class="centi-chat-button-close" ' + _theme.cssIconContent + '>');
    _html.push('<div style="cursor: pointer;">');
    _html.push(_theme.iconClose);
    _html.push('</div>');
    _html.push('</div>');
    _html.push('</div>');
    _html.push('<div class="centi-chat-content-timeline" ' + _theme.cssTimeline + '>');
    _html.push('</div>');
    _html.push('<div class="centi-chat-content-textarea">');
    _html.push('<textarea class="centi-chat-textarea" name="message" placeholder="Digite uma mensagem" ' + _theme.cssTextarea + '/>');
    _html.push('</div>');
    _html.push('</div>');

    function getTemplateSendMessage(message) {
        var template = [
            '<div ' + _theme.cssTalkBubbleSend + ' chat_message_color_send chat_send_message">',
            '<div ' + _theme.cssTalkText + ' class="talktext">',
            '<span>',
            message.Msg,
            '</span>',
            '<div ' + _theme.cssTalkBubbleSendAfter + '></div>',
            '</div>',
            '</div>',
            '<p ' + _theme.cssTalkDate + ' class="chat_message_date">',
            message.DateTime,
            '</p>',
        ].join("");
        return template;
    }

    function getTemplateReceivedMessage(message) {
        var template = [
            '<div ' + _theme.cssTalkBubbleReceived + ' class="talk-bubble tri-right round left-top talk-bubble-received chat_message_color_receiver">',
            '<div ' + _theme.cssTalkText + ' class="talktext">',
            '<span>',
            message.Msg,
            '</span>',
            '<div ' + _theme.cssTalkBubbleReceivedAfter + '></div>',
            '</div>',
            '</div>',
            '<p ' + _theme.cssTalkDate + ' class="chat_message_date">',
            message.DateTime,
            '</p>',
        ].join("");

        return template;
    }

    function getTimeline() {
        return $('.centi-chat-content-timeline');
    }

    function appendReceivedMessage(message) {
        var template = getTemplateReceivedMessage(message);
        getTimeline().append(template);
        getTimeline().animate({ scrollTop: 9999 }, 'slow');
    }

    function prependReceivedMessage(message) {
        var template = getTemplateReceivedMessage(message);
        getTimeline().prepend(template);
    }

    function appendSendMessage(message) {
        var template = getTemplateSendMessage(message);
        getTimeline().append(template);
        getTimeline().animate({ scrollTop: 9999 }, 'slow');
        console.log(_connection);
    }

    function prependSendMessage(message) {
        var template = getTemplateSendMessage(message);
        getTimeline().prepend(template);
    }

    $(document).ready(function() {

        $(document.body).append(_html.join(""));

        (function() {

            $('.centi-chat-button-close').on('click', function() {
                $('.centi-button-window-minimize').toggle();
                $('.centi-chat-window').hide();
                $('.centi-chat-form').hide();
            });

            $('.centi-chat-textarea').on('keydown', function(e) {
                var value = $(this).val();
                if (e.which === 13) {
                    $(this).val('');
                    var message = {
                        Msg: value,
                        DateTime: _utils.formateDate(new Date())
                    }
                    appendSendMessage(message);
                    _connection.send(value);
                    appendReceivedMessage(message);
                    e.preventDefault();
                }
            });

            $(".centi-chat-button-close").mouseover(function() {
                $(this).find(" > div").css("opacity", ".5");
            }).mouseout(function() {
                $(this).find(" > div").css("opacity", "1");
            });

        })();
    });
};
var CentiChatForm = function() {

    var _html = [];
    _html.push('<div class="centi-chat-form" ' + _theme.cssWindow + '>');
    _html.push('<div class="centi-chat-header" ' + _theme.cssHeader + '>');
    _html.push('<p ' + _theme.cssTitle + '>');
    _html.push(config.title ? config.title : 'Centi Soluções');
    _html.push('</p>');
    _html.push('<div id="centi-chat-button-close-form" class="centi-chat-button-close-form" ' + _theme.cssIconContent + '>');
    _html.push('<div style="cursor: pointer;">');
    _html.push(_theme.iconClose);
    _html.push('</div>');
    _html.push('</div>');
    _html.push('</div>');
    _html.push('<div class="centi-chat-content-information" ' + _theme.cssFormInformation + '>');
    _html.push('<p>Por favor, identifique-se: </p>');
    _html.push('</div>');
    _html.push('<div class="centi-chat-content-form" ' + _theme.cssForm + '>');
    _html.push('<form name="centi-chat-form">');
    _html.push('<label ' + _theme.cssFormLabel + ' for="centi-chat-form-name">Nome*: </label>');
    _html.push('<input ' + _theme.cssFormInputText + ' name="centi.chat.user.name" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" value="' + _environment.user.name + '" placeholder="Insira o seu nome" id="centi-chat-form-name">')
    _html.push('<label ' + _theme.cssFormLabel + ' for="centi-chat-form-email">Email*: </label>');
    _html.push('<input ' + _theme.cssFormInputText + ' name="centi.chat.user.email" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" value="' + _environment.user.email + '" placeholder="Insira o seu email" id="centi-chat-form-email">')
    _html.push('<label ' + _theme.cssFormLabel + ' for="centi-chat-form-telephone">Fone*: </label>');
    _html.push('<input ' + _theme.cssFormInputText + ' name="centi.chat.user.telephone" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" value="' + _environment.user.telephone + '" placeholder="Insira o seu telefone" id="centi-chat-form-tel">')
    _html.push('<input ' + _theme.cssFormButton + ' class="centi-chat-form-button-init-chat" type="button" value="Iniciar Chat" id="centi-chat-form-button-init-chat">')
    _html.push('</form>');
    _html.push('</div>');
    _html.push('</div>');

    function addInvalidFieldCss($element) {
        $element.css('border', '1px solid red');
    }

    function changePlaceholderInvalidField($element, message) {
        $element.val('');
        var placeholder = $element.attr('placeholder');
        $element.attr('placeholder', message);
        $element.attr('data-placeholder', placeholder);
    }

    function restorePlaceholderInvalidField($element) {
        var placeholder = $element.attr('data-placeholder');
        $element.attr('placeholder', placeholder);
    }

    function rmInvalidFieldCss($element) {
        $element.css('border', '1px solid grey');
    }

    function addCookie($element) {
        var cookieName = $element.attr('name');
        var cookieValue = $element.val();
        Cookies.set(cookieName, cookieValue);
    }

    function cssValidate($input, isValid, message) {

        if (!isValid) {
            addInvalidFieldCss($input);
            changePlaceholderInvalidField($input, message);
            $input.parent().attr('valid', false);
        } else {
            addCookie($input);
            restorePlaceholderInvalidField($input);
            $input.parent().attr('valid', true);
        }

        $input.on('focus', function() {
            rmInvalidFieldCss($input);
            restorePlaceholderInvalidField($input);
        });
    }

    function isEmpty($input) {
        var value = $input.val();
        var valid = value === '' ? true : false;
        cssValidate($input, !valid, 'Preenchimento obrigat\u00f3rio');
        return valid;
    }

    function validateName() {
        var $input = $('#centi-chat-form-name');
        return isEmpty($input) ? false : true;
    }

    function isValidEmail(email) {
        var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    }

    function validateEmail() {
        var $input = $('#centi-chat-form-email');
        if (isEmpty($input))
            return false;

        var emailValid = isValidEmail($input.val());
        cssValidate($input, emailValid, 'Insira um email v\u00e1lido');
        return emailValid;
    }

    function validateTel() {
        var $input = $('#centi-chat-form-tel');
        return isEmpty($input) ? false : true;
    }

    function validate() {
        if (!validateName() ||
            !validateEmail() ||
            !validateTel())
            return false;

        var $form = $('.centi-chat-form').find('form');
        var isValid = $form.attr('valid');
        return isValid === 'true' ? true : false;
    }

    $(document).ready(function() {
        $(document.body).append(_html.join(""));

        $("#centi-chat-form-tel").mask("(99) 99999-999?9");
        $('#centi-chat-form-button-init-chat').on('click', function() {

            if (!validate())
                return;
            _environment.loginIsOn = true;
            _connection = new CentiChatConnection(config, _environment);
            $('.centi-chat-form').hide();
            $('.centi-chat-window').show();
        });

        $('.centi-chat-button-close-form').on('click', function() {
            $('.centi-button-window-minimize').toggle();
            $('.centi-chat-window').hide();
            $('.centi-chat-form').hide();
        });

        $(".centi-chat-button-close-form").mouseover(function() {
            $(this).find(" > div").css("opacity", ".5");
        }).mouseout(function() {
            $(this).find(" > div").css("opacity", "1");
        });

    });

}
var CentiChatTheme = function() {
    $("head").append("<link href='https://fonts.googleapis.com/css?family=roboto' rel='stylesheet' type='text/css'>");
    var _self = this;
    config._theme = this;

    this.colorThemePrimary = (!config['theme'] || !config['theme'].primary) ? '#82bf2e' : config['theme'].primary;
    this.colorThemeSecondary = (!config['theme'] || !config['theme'].secondary) ? '#4a7016' : config['theme'].secondary;
    var _height = !config['height'] ? '300px' : config['height'] + 'px';
    var _width = !config['width'] ? '200px' : config['width'] + 'px';
    var _background = '#FFF';
    var _border = '1px solid ' + this.colorThemePrimary;

    this.cssWindow = (function() {
        var _styles = {
            'height': _height,
            'width': _width,
            'background': _self.colorThemeSecondary,
            'border': _border,
            'position': 'fixed',
            'right': '5px',
            'bottom': '5px',
            'border-radius': '5px 5px 0 0',
            'display': 'none'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssMinwindow = (function() {
        var _styles = {
            'height': '50px',
            'width': '50px',
            'background': _self.colorThemePrimary,
            'border': _border,
            'position': 'fixed',
            'right': '5px',
            'bottom': '250px',
            'border-radius': '40px',
            'cursor': 'pointer'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssHeader = (function() {
        var _styles = {
            'height': "40px",
            'width': "100%",
            'background': _self.colorThemePrimary,
            'border': _border,
            'text-align': 'center',
            'border-radius': '3px 3px 0 0',
            'display': 'flex'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssTitle = (function() {
        var _styles = {
            'margin': '10px 0 0 10px',
            'color': "#FFF",
            'font-weight': "bold",
            'font-size': '20px',
            'font-family': '\'Roboto\', sans-serif',
            'width': '100%;'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssFormInputText = (function() {
        var _styles = {
            'width': 'calc(100% - 8px)',
            'border-radius': '3px',
            'border': '1px solid grey',
            'height': '30px',
            'font-size': '16px',
            'padding-left': '5px',
            'color': 'grey',
            'margin-bottom': '12px'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssFormLabel = (function() {
        var _styles = {
            'font-size': '14px',
            'color': _self.colorThemePrimary,
        };
        return _utils.generateStyle(_styles);
    })();
    this.cssFormInformation = (function() {
        var _styles = {
            'margin': '10px',
            'color': _self.colorThemePrimary,
            'text-align': 'center',
            'font-family': '\'Roboto\', sans-serif',
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssFormButton = (function() {
        var _styles = {
            'width': 'calc(100% - 8px)',
            'border-radius': '2px',
            'border': '1px solid ' + _self.colorThemePrimary,
            'height': '40px',
            'font-size': '16px',
            'font-weight': 'bold',
            'color': '#FFF',
            'padding-left': '5px',
            'background': _self.colorThemePrimary,
            'margin-bottom': '12px',
            'cursor': 'pointer',
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssForm = (function() {
        var _styles = {
            'margin': '10px 0 0 10px',
            'color': "#FFF",
            'font-weight': "bold",
            'font-size': '20px',
            'font-family': '\'Roboto\', sans-serif'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssTimeline = (function() {
        var _styles = {
            'height': "calc(100% - 150px)",
            'border-bottom': '1px solid ' + _self.colorThemePrimary,
            'padding': '10px',
            'overflow': 'auto',
            'overflow-x': 'hidden',
            'background': '#FFF'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssTalkBubbleSend = (function() {
        var _styles = {
            'margin': '5px 65px',
            'display': 'inline-block',
            'position': 'relative',
            'width': '200px',
            'height': 'auto',
            'background-color': 'silver',
            'border-radius': '5px'
        };
        return _utils.generateStyle(_styles);
    })();
    this.cssTalkBubbleReceived = (function() {
        var _styles = {
            'margin': '5px 15px',
            'display': 'inline-block',
            'position': 'relative',
            'width': '200px',
            'height': 'auto',
            'background-color': '#e5ed74',
            'border-radius': '5px'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssTalkBubbleSendAfter = (function() {
        var _styles = {
            'right': '-8px',
            'top': '0',
            'border': '12px solid',
            'border-color': 'silver transparent transparent silver',
            'position': 'absolute'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssTalkBubbleReceivedAfter = (function() {
        var _styles = {
            'content': '\' \'',
            'position': 'absolute',
            'width': 0,
            'height': 0,
            'left': '-8px',
            'right': 'auto',
            'top': '0',
            'bottom': 'auto',
            'border': '12px solid',
            'border-color': '#e5ed74 transparent transparent'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssTalkText = (function() {
        var _styles = {
            'padding': '3px 10px',
            'text-align': 'left',
            'line-height': '1.5em',
            'word-break': 'break-all',
            'font-family': '\'Roboto\', sans-serif'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssTalkDate = (function() {
        var _styles = {
            'font-size': '10px',
            'text-align': 'center',
            'opacity': '.7',
            'font-family': '\'Roboto\', sans-serif'
        };
        return _utils.generateStyle(_styles);
    })();

    this.cssTextarea = (function() {
        var _styles = {
            'padding': '5px',
            'height': "100%",
            'width': "100%",
            'border': 'none',
            'resize': 'none',
            'font-size': '16px',
            'font-family': '\'Roboto\', sans-serif',
            'min-height': '110px'
        };
        return _utils.generateStyle(_styles);
    })();
    this.cssIconContent = (function() {
        var _styles = {
            'margin': '2px 0',
            'position': 'absolute',
            'right': '5px',
            'display': 'flex'
        };

        return _utils.generateStyle(_styles);
    })();

    this.iconClose = (function() {
        return [
            '<svg style="width:30px;height:30px" viewBox="0 0 24 24">',
            '<path fill="#FFF" d="M19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M19,19H5V5H19V19M17,8.4L13.4,12L17,15.6L15.6,17L12,13.4L8.4,17L7,15.6L10.6,12L7,8.4L8.4,7L12,10.6L15.6,7L17,8.4Z" />',
            '</svg>'
        ].join("");
    })();

    this.iconMinimize = (function() {
        return [
            '<svg style="width:24px;height:24px" viewBox="0 0 24 24">',
            '<path fill="#FFF" d="M20,14H4V10H20" />',
            '</svg>'
        ].join("");
    })();
    this.iconChat = (function() {
        return [
            '<svg style="width:40px;height:40px" viewBox="0 0 24 24">',
            '<path fill="#FFF" d="M9.5,4C5.36,4 2,6.69 2,10C2,11.89 3.08,13.56 4.78,14.66L4,17L6.5,15.5C7.39,15.81 8.37,16 9.41,16C9.15,15.37 9,14.7 9,14C9,10.69 12.13,8 16,8C16.19,8 16.38,8 16.56,8.03C15.54,5.69 12.78,4 9.5,4M6.5,6.5A1,1 0 0,1 7.5,7.5A1,1 0 0,1 6.5,8.5A1,1 0 0,1 5.5,7.5A1,1 0 0,1 6.5,6.5M11.5,6.5A1,1 0 0,1 12.5,7.5A1,1 0 0,1 11.5,8.5A1,1 0 0,1 10.5,7.5A1,1 0 0,1 11.5,6.5M16,9C12.69,9 10,11.24 10,14C10,16.76 12.69,19 16,19C16.67,19 17.31,18.92 17.91,18.75L20,20L19.38,18.13C20.95,17.22 22,15.71 22,14C22,11.24 19.31,9 16,9M14,11.5A1,1 0 0,1 15,12.5A1,1 0 0,1 14,13.5A1,1 0 0,1 13,12.5A1,1 0 0,1 14,11.5M18,11.5A1,1 0 0,1 19,12.5A1,1 0 0,1 18,13.5A1,1 0 0,1 17,12.5A1,1 0 0,1 18,11.5Z" />',
            '</svg>'
        ].join("");
    })();
}

    if (!config) {
        console.log('Please add object config with chat configurations requireds, (wssPath)');
        return;
    }

    var _self = this;
    var _utils = new Utils();
    var _theme = new CentiChatTheme();
    var _environment = new CentiChatEnvironment();
    new CentiChatWindow();
    new CentiChatMinWindow();
    new CentiChatForm();
    var _connection = null;

};